name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  
  Plan:
    name: 'Plan'
    runs-on: ubuntu-latest
    environment: plan

    outputs:
      envtouse: ${{ steps.compare_plan.outputs.envtouse }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Azure Login
      uses: Azure/login@v1.1
      with:
        allow-no-subscriptions: true
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=infrastructure/sandbox init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform -chdir=infrastructure/sandbox fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=infrastructure/sandbox plan -input=false -out=tfplan.binary
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Terraform Show Plan
      id: show_plan
      run: terraform -chdir=infrastructure/sandbox show tfplan.binary -no-color

    - name: Save Terraform Plan to file
      id: save_show_plan
      run: terraform -chdir=infrastructure/sandbox show tfplan.binary -no-color > infrastructure/sandbox/tfplanshow.txt

    - name: Upload tfplan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: |
          infrastructure/sandbox/tfplan.binary
          infrastructure/sandbox/tfplanshow.txt

    - name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload --account-name tfstatejpsbx --auth-mode key -c tfstate -n tfplanshow.txt -f infrastructure/sandbox/tfplanshow.txt --overwrite

    - name: Comment PR
      if: ${{ github.event_name == 'pull_request' }}
      uses: thollander/actions-comment-pull-request@v2
      with:
        comment_tag: showplan
        message: |
          # Terraform Plan
          ```${{steps.show_plan.outputs.stdout}}```
        GITHUB_TOKEN: ${{ secrets.TERRAFORMPAT }}

    - name: Compare Plan
      id: compare_plan
      run: echo "envtouse=production" >> $GITHUB_OUTPUT

  Apply:
    name: 'Apply'
    needs: Plan
    runs-on: ubuntu-latest
    environment: ${{needs.Plan.outputs.envtouse}}
    defaults:
      run:
        shell: bash
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:

    # - name: Request review
    #   uses: trstringer/manual-approval@v1
    #   with:
    #     secret: ${{ secrets.TERRAFORMPATAPPROVE }}
    #     approvers: jason-parry
    #     minimum-approvals: 1
    #     issue-title: "Test approval stage"
    #     exclude-workflow-initiator-as-approver: false

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Azure Login
      uses: Azure/login@v1.1
      with:
        allow-no-subscriptions: true
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=infrastructure/sandbox init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    # # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform -chdir=infrastructure/sandbox fmt -check

    - name: Download tfplan
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: infrastructure/sandbox

    - name: Terraform Apply
      run: terraform -chdir=infrastructure/sandbox apply -auto-approve -input=false tfplan.binary
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
