name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=infrastructure/sandbox init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform -chdir=infrastructure/sandbox fmt -check

    - name: Azure Login
      uses: Azure/login@v1.4.6
      with:
#         # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds: ${{ secrets.AZURE_CREDENTIALS }}
#         # ClientId of the Azure Service principal created.
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
#         # TenantId of the Azure Service principal created.
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#         # Azure subscriptionId
         #subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#         # Set this value to true to enable Azure PowerShell Login in addition to Az CLI login
#         enable-AzPSSession: # optional
#         # Name of the environment. Supported values are azurecloud, azurestack, azureusgovernment, azurechinacloud, azuregermancloud. Default being azurecloud
#         environment: # optional, default is azurecloud
#         # Set this value to true to enable support for accessing tenants without subscriptions
          allow-no-subscriptions: true
#         # Provide audience field for access-token. Default value is api://AzureADTokenExchange
#         audience: # optional, default is api://AzureADTokenExchange

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=infrastructure/sandbox plan -input=false
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        
#       # On push to "main", build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     - name: Terraform Apply
#       if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
#       run: terraform --chdir=infrastructure/sandbox apply -auto-approve -input=false
